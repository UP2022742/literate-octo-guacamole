<html>

<head>
    <title>Weather</title>
    <link rel="icon" href="/static/img/weather.png">
    <link rel="stylesheet" href="/static/css/livelong.css">
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-2811329373442496"
     crossorigin="anonymous"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<body>
    <div class="container">
        <div class="main-content">
            {{>header}}

            <p id="note" class="note">Input your desired location below!</p>

            <div autocomplete="off" id="form">
                <div class="autocomplete" style="width:300px;">
                    <input autocomplete="off" id="myInput" type="text" placeholder="Location" name="locationSearch">
                </div>
                <button type="submit" id="country_submit_button">Search</button>

                <div class="radioButtons">
                    <label class="radioContainer">Overall Score
                        <input id="score" type="radio" checked="checked" name="display" value="score">
                        <span class="checkmark"></span>
                    </label>

                    <label class="radioContainer">Heat Scores
                        <input id="heat" type="radio" name="display" value="heat">
                        <span class="checkmark"></span>
                    </label>

                    <label class="radioContainer">Air Quality Scores
                        <input id="air" type="radio" name="display" value="air">
                        <span class="checkmark"></span>
                    </label>
                </div>

                <div id="dateDiv"></div>

            </div>

            <p id="average-heat-prediction">
            </p>
            <p id="carbon-dioxide"></p>
            <p id="nitrogen-oxide"></p>
        </div>

        <div id="regions_div" style="width: 100%; height:500px"></div>
        <div id="errorModalFrame" style="display: none;" class="frame">
            <div id="errorModal" class="modal" data-modal="">
                <img alt="Warning" class="modal__icon"
                    src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/OOjs_UI_icon_alert_destructive.svg/480px-OOjs_UI_icon_alert_destructive.svg.png" />
                <h6 class="modal__title">
                    Oh no!
                </h6>
                <p id="errorModalText" class="modal__text"></p>
                <button id="dismissErrorModalButton" class="modal__btn btn" data-modal-closer="">Dismiss</button>
            </div>
            <button id="displayErrorModalButton" class="frame__repeat btn" data-modal-repeat=""></button>
        </div>
        {{>footer}}
    </div>
    <script>
        const countries = {
            "Afghanistan":"AF",
            "Albania":"AL",
            "Algeria":"DZ",
            "American Samoa":"AS",
            "Andorra":"AD",
            "Angola":"AO",
            "Anguilla":"AI",
            "Antarctica":"AQ",
            "Antigua and Barbuda":"AG",
            "Argentina":"AR",
            "Armenia":"AM",
            "Aruba":"AW",
            "Australia":"AU",
            "Austria":"AT",
            "Azerbaijan":"AZ",
            "Bahamas":"BS",
            "The Bahamas":"BS",
            "Bahrain":"BH",
            "Bangladesh":"BD",
            "Barbados":"BB",
            "Belarus":"BY",
            "Belgium":"BE",
            "Belize":"BZ",
            "Benin":"BJ",
            "Bermuda":"BM",
            "Bhutan":"BT",
            "Bolivia":"BO",
            "Bonaire":"BQ",
            "Bosnia and Herzegovina":"BA",
            "Botswana":"BW",
            "Bouvet Island":"BV",
            "Brazil":"BR",
            "British Indian Ocean Territory":"IO",
            "Brunei Darussalam":"BN",
            "Bulgaria":"BG",
            "Burkina Faso":"BF",
            "Burundi":"BI",
            "Cabo Verde":"CV",
            "Cambodia":"KH",
            "Cameroon":"CM",
            "Canada":"CA",
            "Cayman Islands":"KY",
            "Central African Republic":"CF",
            "Chad":"TD",
            "Chile":"CL",
            "China":"CN",
            "Christmas Island":"CX",
            "Cocos Islands":"CC",
            "Colombia":"CO",
            "Comoros":"KM",
            "The Democratic Republic of the Congo":"CD",
            "Congo":"CG",
            "Cook Islands":"CK",
            "Costa Rica":"CR",
            "Croatia":"HR",
            "Cuba":"CU",
            "Curaçao":"CW",
            "Cyprus":"CY",
            "Czechia":"CZ",
            "Côte d'Ivoire":"CI",
            "Denmark":"DK",
            "Djibouti":"DJ",
            "Dominica":"DM",
            "Dominican Republic":"DO",
            "Ecuador":"EC",
            "Egypt":"EG",
            "El Salvador":"SV",
            "Equatorial Guinea":"GQ",
            "Eritrea":"ER",
            "Estonia":"EE",
            "Eswatini":"SZ",
            "Ethiopia":"ET",
            "Falkland Islands":"FK",
            "Faroe Islands":"FO",
            "Fiji":"FJ",
            "Finland":"FI",
            "France":"FR",
            "French Guiana":"GF",
            "French Polynesia":"PF",
            "French Southern Territories":"TF",
            "Gabon":"GA",
            "Gambia":"GM",
            "Georgia":"GE",
            "Germany":"DE",
            "Ghana":"GH",
            "Gibraltar":"GI",
            "Greece":"GR",
            "Greenland":"GL",
            "Grenada":"GD",
            "Guadeloupe":"GP",
            "Guam":"GU",
            "Guatemala":"GT",
            "Guernsey":"GG",
            "Guinea":"GN",
            "Guinea-Bissau":"GW",
            "Guyana":"GY",
            "Haiti":"HT",
            "Heard Island and McDonald Islands":"HM",
            "Holy See":"VA",
            "Honduras":"HN",
            "Hong Kong":"HK",
            "Hungary":"HU",
            "Iceland":"IS",
            "India":"IN",
            "Indonesia":"ID",
            "Iran":"IR",
            "Iraq":"IQ",
            "Ireland":"IE",
            "Isle of Man":"IM",
            "Israel":"IL",
            "Italy":"IT",
            "Jamaica":"JM",
            "Japan":"JP",
            "Jersey":"JE",
            "Jordan":"JO",
            "Kazakhstan":"KZ",
            "Kenya":"KE",
            "Kiribati":"KI",
            "The Democratic People's Republic Of Korea":"KP",
            "Korea":"KR",
            "Kuwait":"KW",
            "Kyrgyzstan":"KG",
            "Lao People's Democratic Republic":"LA",
            "Latvia":"LV",
            "Lebanon":"LB",
            "Lesotho":"LS",
            "Liberia":"LR",
            "Libya":"LY",
            "Liechtenstein":"LI",
            "Lithuania":"LT",
            "Luxembourg":"LU",
            "Macao":"MO",
            "Madagascar":"MG",
            "Malawi":"MW",
            "Malaysia":"MY",
            "Maldives":"MV",
            "Mali":"ML",
            "Malta":"MT",
            "Marshall Islands":"MH",
            "Martinique":"MQ",
            "Mauritania":"MR",
            "Mauritius":"MU",
            "Mayotte":"YT",
            "Mexico":"MX",
            "Micronesia":"FM",
            "Moldova":"MD",
            "Monaco":"MC",
            "Mongolia":"MN",
            "Montenegro":"ME",
            "Montserrat":"MS",
            "Morocco":"MA",
            "Mozambique":"MZ",
            "Myanmar":"MM",
            "Namibia":"NA",
            "Nauru":"NR",
            "Nepal":"NP",
            "Netherlands":"NL",
            "New Caledonia":"NC",
            "New Zealand":"NZ",
            "Nicaragua":"NI",
            "Niger":"NE",
            "Nigeria":"NG",
            "Niue":"NU",
            "Norfolk Island":"NF",
            "Northern Mariana Islands":"MP",
            "Norway":"NO",
            "Oman":"OM",
            "Pakistan":"PK",
            "Palau":"PW",
            "Palestine":"PS",
            "Panama":"PA",
            "Papua New Guinea":"PG",
            "Paraguay":"PY",
            "Peru":"PE",
            "Philippines":"PH",
            "Pitcairn":"PN",
            "Poland":"PL",
            "Portugal":"PT",
            "Puerto Rico":"PR",
            "Qatar":"QA",
            "Republic of North Macedonia":"MK",
            "Romania":"RO",
            "Russia":"RU",
            "Rwanda":"RW",
            "Réunion":"RE",
            "Saint Barthélemy":"BL",
            "Saint Helena, Ascension and Tristan da Cunha":"SH",
            "Saint Kitts and Nevis":"KN",
            "Saint Lucia":"LC",
            "Saint Martin":"MF",
            "Saint Pierre and Miquelon":"PM",
            "Saint Vincent and the Grenadines":"VC",
            "Samoa":"WS",
            "San Marino":"SM",
            "Sao Tome and Principe":"ST",
            "Saudi Arabia":"SA",
            "Senegal":"SN",
            "Serbia":"RS",
            "Seychelles":"SC",
            "Sierra Leone":"SL",
            "Singapore":"SG",
            "Sint Maarten":"SX",
            "Slovakia":"SK",
            "Slovenia":"SI",
            "Solomon Islands":"SB",
            "Somalia":"SO",
            "South Africa":"ZA",
            "South Georgia and the South Sandwich Islands":"GS",
            "South Sudan":"SS",
            "Spain":"ES",
            "Sri Lanka":"LK",
            "Sudan":"SD",
            "Suriname":"SR",
            "Svalbard and Jan Mayen":"SJ",
            "Sweden":"SE",
            "Switzerland":"CH",
            "Syrian Arab Republic":"SY",
            "Taiwan":"TW",
            "Tajikistan":"TJ",
            "Tanzania":"TZ",
            "Thailand":"TH",
            "Timor-Leste":"TL",
            "Togo":"TG",
            "Tokelau":"TK",
            "Tonga":"TO",
            "Trinidad and Tobago":"TT",
            "Tunisia":"TN",
            "Turkey":"TR",
            "Turkmenistan":"TM",
            "Turks and Caicos Islands":"TC",
            "Tuvalu":"TV",
            "Uganda":"UG",
            "Ukraine":"UA",
            "United Arab Emirates":"A",
            "United Kingdom":"GB",
            "United States Minor Outlying Islands":"UM",
            "United States of America":"US",
            "Uruguay":"UY",
            "Uzbekistan":"UZ",
            "Vanuatu":"VU",
            "Venezuela":"VE",
            "Vietnam":"VN",
            "British Virgin Islands":"VG",
            "U.S. Virgin Islands":"VI",
            "Wallis and Futuna":"WF",
            "Western Sahara":"EH",
            "Yemen":"YE",
            "Zambia":"ZM",
            "Zimbabwe":"ZW",
            "Åland Islands":"AX",
            "World":""
        }
        var today = new Date();
        var dd = String(today.getDate()).padStart(2, "0");
        var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
        var yyyy = today.getFullYear();

        var dateInput = document.createElement("INPUT");
        var dateDiv = document.getElementById("dateDiv");
        dateInput.setAttribute("type", "date");
        dateInput.setAttribute("min", yyyy + "-" + mm + "-" + dd);
        dateInput.value = yyyy + "-" + mm + "-" + dd;
        dateDiv.appendChild(dateInput);

        // TODO: This is a temporary solution, either pass as array like to frontend
        // or when the total score is ready uncomment the below code.
        function map_to_2d_array(original) {
        var multiArray = [];
        for (var key in original) {
            multiArray.push([key, original[key]]);
        }
        return multiArray;
        }

        function drawRegionsMap(countries_and_values, focus_country) {
            var data;

            if (focus_country === "world") {
                console.log("Mapping dictionary to 2d array...");
                data = google.visualization.arrayToDataTable(
                [
                    ["Country", "Score"]
                ].concat(map_to_2d_array(countries_and_values))
                );
            } else {
                console.log("Drawing region country...", focus_country);
                data = google.visualization.arrayToDataTable([
                    ["Country", "Score"],
                    [focus_country, countries_and_values],
                ]);
            }

            var options = {
                sizeAxis: {
                    minValue: 0,
                    maxValue: 1,
                },
                region: focus_country,
                colorAxis: {
                    minValue: 0,
                    maxValue: 1,
                    colors: ["green", "red"],
                },
            };

            var chart = new google.visualization.GeoChart(
                document.getElementById("regions_div")
            );
            chart.draw(data, options);
        }

        var submit_button = document.getElementById("country_submit_button");
        submit_button.addEventListener("click", function () {
            var getSelectedValue = document.querySelector(
                'input[name="display"]:checked'
            );

            var country_request = document.getElementById("myInput").value;
            if (!(country_request in countries)) {
                displayErrorModal("Error, please type proper country name...");
                return;
            }

            var countryCodeLocation = countries[country_request];

            var dateObject = dateInput.valueAsDate;
            var month = dateObject.getUTCMonth() + 1; //months from 1-12
            var day = dateObject.getUTCDate();
            var year = dateObject.getUTCFullYear();

            fetch("/live/messages", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    locationSearch: country_request,
                    inputDate: dateObject.toISOString().slice(0, 19).replace("T", " "),
                }),
                })
                .then((res) => {
                    return res.json();
                })
                .then((data) => console.log(data));

            if (getSelectedValue.value == "heat") {
                fetch(
                    "/live/heat_prediction?year=" +
                    year +
                    "&month=" +
                    month +
                    "&day=" +
                    day +
                    "&country=" +
                    countryCodeLocation
                    ).then((response) => {
                    response.json().then((data) => {
                        if (data.error) {
                        displayErrorModal(data.error);
                        } else {
                        if (country_request === "World") {
                            console.log("Drawing entire map...", country_request);
                            drawRegionsMap(data, "world");
                        } else {
                            console.log("Drawing region of map...", country_request);
                            drawRegionsMap(data, countryCodeLocation);
                        }
                        }
                    });
                });
            } else if (getSelectedValue.value == "air") {
                fetch(
                "/live/air_pollution_prediction?year=" +
                year +
                "&month=" +
                month +
                "&day=" +
                day +
                "&country=" +
                countryCodeLocation
                ).then((response) => {
                response.json().then((data) => {
                    if (data.error) {
                    displayErrorModal(data.error);
                    } else {
                    if (country_request === "World") {
                        console.log("Drawing entire map...", country_request);
                        drawRegionsMap(data, "world");
                    } else {
                        console.log("Drawing region of map...", country_request);
                        drawRegionsMap(data, countryCodeLocation);
                    }
                    }
                });
                });
            } else if (getSelectedValue.value == "score") {
                fetch(
                "/live/score?year=" +
                year +
                "&month=" +
                month +
                "&day=" +
                day +
                "&country=" +
                countryCodeLocation
                ).then((response) => {
                response.json().then((data) => {
                    if (data.error) {
                    displayErrorModal(data.error);
                    } else {
                    if (country_request === "World") {
                        console.log("Drawing entire map...", country_request);
                        drawRegionsMap(data, "world");
                    } else {
                        console.log("Drawing region of map...", country_request);
                        drawRegionsMap(data, countryCodeLocation);
                    }
                    }
                });
                });
            } else {
                displayErrorModal("Selected value was incorrect, this shouldn't happen...");
            }
        });

        function regions_map_wrapper() {
            drawRegionsMap(0, "world");
        }

        google.charts.load("current", {
            packages: ["geochart"],
        });
        google.charts.setOnLoadCallback(regions_map_wrapper);

        // TODO: Make changes once the score is implemented.
    </script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script>

        // JQuery function fadeOut requires it be found in jQuery, in future
        // just extract the fadeOut function in pure JavaScript.
        const displayErrorModalButton = $('#displayErrorModalButton');
        const erorrModalText = document.getElementById('errorModalText');
        const errorModal = document.getElementById('errorModal');
        const dismissErrorModalButton = document.getElementById('dismissErrorModalButton');
        const errorModalFrame = document.getElementById('errorModalFrame');

        function displayErrorModal(errorMessage){
            errorModalText.innerText = errorMessage;
            errorModalFrame.style.display = 'initial';
            displayErrorModalButton.fadeOut();
            errorModal.classList.remove('_hide');
        }

        dismissErrorModalButton.addEventListener('click', function(){
            errorModal.classList.add('_hide');
            displayErrorModalButton.fadeIn();
            errorModalFrame.style.display = 'none';
        })

        function autocomplete(inp) {

            /*the autocomplete function takes two arguments,
            the text field element and an array of possible autocompleted values:*/
            var currentFocus;

            /*execute a function when someone writes in the text field:*/
            inp.addEventListener("input", function (e) {
                var a, b, val = this.value;

                /*close any already open lists of autocompleted values*/
                closeAllLists();
                if (!val) {
                    return false;
                }

                currentFocus = -1;
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                this.parentNode.appendChild(a);

                fetch("/live/countries?country=" + this.value).then((response) => {
                    response.json().then((data) => {
                        if (data.error) {
                            console.error(data);
                        } else {
                            for (i = 0; i < data.length; i++) {
                                b = document.createElement("DIV");
                                b.innerHTML = "<strong>" + data[i].substr(0, val.length) +
                                    "</strong>";
                                b.innerHTML += data[i].substr(val.length);
                                b.innerHTML += "<input type='hidden' value='" + data[i] + "'>";
                                b.addEventListener("click", function (e) {
                                    inp.value = this.getElementsByTagName("input")[0]
                                        .value;
                                    closeAllLists();
                                });
                                a.appendChild(b);
                            }
                        }
                    });
                });
            });
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                }
            });

            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }

            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }

            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }

        /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
        autocomplete(document.getElementById("myInput"));
    </script>

</body>

</html> 